{"version":3,"sources":["components/error-indicator/death-star.png","components/header/index.js","components/header/header.js","components/spinner/index.js","components/spinner/spinner.js","components/error-indicator/index.js","components/error-indicator/error-indicator.js","services/swapi-service.js","components/random-planet/random-planet.js","components/swapi-service-context/swapi-service-context.js","components/error-boundry/error-boundry.js","services/dummy-swapi-service.js","components/error-button/error-button.js","components/item-details/item-details.js","components/item-details/index.js","components/hoc-helpers/with-swapi-service.js","components/sw-components/person-details.js","components/sw-components/planet-details.js","components/sw-components/starship-details.js","components/item-list/item-list.js","components/item-list/index.js","components/hoc-helpers/with-data.js","components/hoc-helpers/compose.js","components/hoc-helpers/with-child-function.js","components/sw-components/item-lists.js","components/row/row.js","components/pages/people-page.js","components/pages/planets-page.js","components/pages/starships-page.js","components/random-planet/hooks-random-planet.js","components/pages/login-page.js","components/pages/secret-page.js","components/pages/notFoundPage.js","components/app/index.js","components/app/app.js","index.js"],"names":["module","exports","Header","onServiceChange","className","to","onClick","Spinner","ErrorIndicator","src","icon","alt","SwapiService","_apiBase","_imageBase","getResource","url","a","fetch","res","ok","Error","status","json","getAllPeople","results","map","_transformPerson","getPerson","id","person","getAllPlanets","_transformPlanet","getPlanet","planet","getAllStarships","_transformStarship","getStarship","starship","getPersonImage","getPlanetImage","getStarshipImage","_extractId","item","match","name","population","rotationPeriod","rotation_period","diameter","model","manufacturer","costInCredits","cost_in_credits","length","crew","passengers","cargoCapacity","gender","birthYear","birth_year","eyeColor","eye_color","RandomPlanet","swapiService","state","loading","onPlanetLoaded","setState","error","onError","err","updatePlanet","Math","floor","random","then","catch","updateInterval","this","props","interval","setInterval","clearInterval","hasData","errorMessage","spinner","content","Component","defaultProps","PlanetView","Fragment","React","createContext","SwapiServiceProvider","Provider","SwapiServiceConsumer","Consumer","ErrorBoundry","hasError","errorInfo","children","DummySwapiService","_people","_planets","_starships","ErrorButton","renderError","foo","bar","Record","field","label","ItemDetails","image","updateItem","prevProps","itemId","getData","getImageUrl","Children","child","cloneElement","withSwapiService","mapMethodsToProps","Wrapped","serviceProps","ItemList","data","onItemSelected","renderLabel","items","key","withData","View","prevState","snapshot","update","compose","funcs","comp","reduceRight","wrapped","f","withChildFunction","fn","renderName","PersonList","PlanetList","StarshipList","Row","left","right","withRouter","history","params","push","PlanetsPage","selectedItem","RandomPlanetHooks","useState","setPlanet","setLoading","useEffect","LoginPage","isLoggedIn","onLogin","SecretPage","notFoundPage","style","fontSize","margin","color","App","showRandomPlanet","value","exact","path","render","component","PeoplePage","StarshipsPage","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.7453441c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/death-star.533696c0.png\";","import Header from './header';\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nimport './header.css';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst Header = ({onServiceChange}) => {\r\n  return (\r\n    <div className=\"header d-flex\">\r\n      <h3>\r\n        <Link to=\"/\">\r\n          StarDB\r\n        </Link>\r\n      </h3>\r\n      <ul className=\"d-flex\">\r\n        <li>\r\n          <Link to=\"/people/\">People</Link>\r\n        </li>\r\n        <li>\r\n          <Link to=\"/planets/\">Planets</Link>\r\n        </li>\r\n        <li>\r\n          <Link to=\"/starships/\">Starships</Link>\r\n        </li>\r\n          <li>\r\n          <Link to=\"/login\">Login</Link>\r\n        </li>\r\n          <li>\r\n          <Link to=\"/secret\">Secret</Link>\r\n        </li>\r\n      </ul>\r\n\r\n        <button className='btn btn-primary btn-small'\r\n        onClick={onServiceChange}>\r\n            Change Service\r\n        </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;","import Spinner from './spinner';\r\n\r\nexport default Spinner;\r\n","import React from 'react';\r\n\r\nimport './spinner.css';\r\n\r\nconst Spinner = () => {\r\n  return (\r\n    <div className=\"lds-css\">\r\n      <div className=\"lds-double-ring\">\r\n        <div></div>\r\n        <div></div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Spinner;\r\n","\r\nimport ErrorIndicator from './error-indicator';\r\n\r\nexport default ErrorIndicator;","import React from 'react';\r\n\r\nimport './error-indicator.css';\r\nimport icon from './death-star.png';\r\n\r\nconst ErrorIndicator = () => {\r\n    return (\r\n        <div className=\"error-indicator\">\r\n            <img src={icon} alt=\"error icon\"/>\r\n            <span className=\"boom\">BOOM!</span>\r\n            <span>\r\n        something has gone terribly wrong\r\n      </span>\r\n            <span>\r\n        (but we already sent droids to fix it)\r\n      </span>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ErrorIndicator;","export default class SwapiService {\r\n    _apiBase = 'https://swapi.dev/api';\r\n    _imageBase = 'https://starwars-visualguide.com/assets/img';\r\n\r\n    getResource = async (url) => {\r\n        const res = await fetch(`${this._apiBase}${url}`);\r\n\r\n        if (!res.ok) {\r\n            throw new Error(`Could not fetch ${url}` +\r\n                `, received ${res.status}`)\r\n        }\r\n        return await res.json();\r\n    };\r\n\r\n    getAllPeople = async () => {\r\n        const res = await this.getResource(`/people/`);\r\n        return res.results.map(this._transformPerson);\r\n    };\r\n\r\n    getPerson = async (id) => {\r\n        const person = await this.getResource(`/people/${id}/`);\r\n        return this._transformPerson(person);\r\n    };\r\n\r\n    getAllPlanets = async () => {\r\n        const res = await this.getResource(`/planets/`);\r\n        return res.results.map(this._transformPlanet);\r\n    };\r\n\r\n    getPlanet = async (id) => {\r\n        const planet = await this.getResource(`/planets/${id}/`);\r\n        return this._transformPlanet(planet);\r\n    };\r\n\r\n    getAllStarships = async () => {\r\n        const res = await this.getResource(`/starships/`);\r\n        return res.results.map(this._transformStarship);\r\n    };\r\n\r\n    getStarship = async (id) => {\r\n        const starship = await this.getResource(`/starships/${id}/`);\r\n        return this._transformStarship(starship);\r\n    };\r\n\r\n    getPersonImage = ({id}) => {\r\n        return `${this._imageBase}/characters/${id}.jpg`\r\n    };\r\n\r\n    getPlanetImage = ({id}) => {\r\n        return `${this._imageBase}/planets/${id}.jpg`\r\n    };\r\n\r\n    getStarshipImage = ({id}) => {\r\n        return `${this._imageBase}/starships/${id}.jpg`\r\n    };\r\n\r\n    _extractId = (item) => {\r\n        const idRegExp = /\\/([0-9]*)\\/$/;\r\n        return item.url.match(idRegExp)[1];\r\n    };\r\n\r\n    _transformPlanet = (planet) => {\r\n        return {\r\n            id: this._extractId(planet),\r\n            name: planet.name,\r\n            population: planet.population,\r\n            rotationPeriod: planet.rotation_period,\r\n            diameter: planet.diameter\r\n        }\r\n    };\r\n\r\n    _transformStarship = (starship) => {\r\n        return {\r\n            id: this._extractId(starship),\r\n            name: starship.name,\r\n            model: starship.model,\r\n            manufacturer: starship.manufacturer,\r\n            costInCredits: starship.cost_in_credits,\r\n            length: starship.length,\r\n            crew: starship.crew,\r\n            passengers: starship.passengers,\r\n            cargoCapacity: starship.cargoCapacity\r\n        }\r\n    };\r\n\r\n    _transformPerson = (person) => {\r\n        return {\r\n            id: this._extractId(person),\r\n            name: person.name,\r\n            gender: person.gender,\r\n            birthYear: person.birth_year,\r\n            eyeColor: person.eye_color\r\n        }\r\n    };\r\n}\r\n","import React, {Component} from 'react';\r\n\r\nimport Spinner from '../spinner';\r\nimport ErrorIndicator from '../error-indicator';\r\nimport SwapiService from '../../services/swapi-service';\r\nimport './random-planet.css';\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default class RandomPlanet extends Component {\r\n\r\n    static defaultProps = {\r\n        updateInterval: 5000\r\n    };\r\n\r\n    static propTypes = {\r\n        updateInterval: PropTypes.number\r\n    };\r\n\r\n    swapiService = new SwapiService();\r\n\r\n    state = {\r\n        planet: {},\r\n        loading: true\r\n    };\r\n\r\n    componentDidMount() {\r\n        const {updateInterval} = this.props;\r\n        this.updatePlanet();\r\n        this.interval = setInterval(this.updatePlanet, updateInterval);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.interval);\r\n    }\r\n\r\n    onPlanetLoaded = (planet) => {\r\n        this.setState({\r\n            planet,\r\n            loading: false,\r\n            error: false\r\n        });\r\n    };\r\n\r\n    onError = (err) => {\r\n        this.setState({\r\n            error: true,\r\n            loading: false\r\n        });\r\n    };\r\n\r\n    updatePlanet = () => {\r\n        const id = Math.floor(Math.random() * 17) + 2;\r\n        this.swapiService\r\n            .getPlanet(id)\r\n            .then(this.onPlanetLoaded)\r\n            .catch(this.onError);\r\n    };\r\n\r\n    render() {\r\n        const {planet, loading, error} = this.state;\r\n\r\n        const hasData = !(loading || error);\r\n\r\n        const errorMessage = error ? <ErrorIndicator/> : null;\r\n        const spinner = loading ? <Spinner/> : null;\r\n        const content = hasData ? <PlanetView planet={planet}/> : null;\r\n\r\n        return (\r\n            <div className=\"random-planet jumbotron rounded\">\r\n                {errorMessage}\r\n                {spinner}\r\n                {content}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst PlanetView = ({planet}) => {\r\n\r\n    const {\r\n        id, name, population,\r\n        rotationPeriod, diameter\r\n    } = planet;\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <img className=\"planet-image\"\r\n                 src={`https://starwars-visualguide.com/assets/img/planets/${id}.jpg`}\r\n                 alt=\"planet\"/>\r\n            <div>\r\n                <h4>{name}</h4>\r\n                <ul className=\"list-group list-group-flush\">\r\n                    <li className=\"list-group-item\">\r\n                        <span className=\"term\">Population</span>\r\n                        <span>{population}</span>\r\n                    </li>\r\n                    <li className=\"list-group-item\">\r\n                        <span className=\"term\">Rotation Period</span>\r\n                        <span>{rotationPeriod}</span>\r\n                    </li>\r\n                    <li className=\"list-group-item\">\r\n                        <span className=\"term\">Diameter</span>\r\n                        <span>{diameter}</span>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\n\r\n\r\n","import React from \"react\";\r\n\r\nconst {\r\n    Provider: SwapiServiceProvider,\r\n    Consumer: SwapiServiceConsumer\r\n} = React.createContext();\r\n\r\nexport {\r\n    SwapiServiceConsumer,\r\n    SwapiServiceProvider\r\n}","import React from \"react\";\r\nimport ErrorIndicator from \"../error-indicator\";\r\n\r\nclass ErrorBoundry extends React.Component{\r\n    state = {\r\n        hasError: false\r\n    };\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        this.setState({\r\n            hasError:true\r\n        });\r\n    }\r\n\r\n    render() {\r\n        if(this.state.hasError) {\r\n            return <ErrorIndicator/>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","export default class DummySwapiService {\r\n\r\n  _people = [\r\n    {\r\n      id: 1,\r\n      name: 'Bilbo Baggins [TEST DATA]',\r\n      gender: 'male',\r\n      birthYear: 'long ago',\r\n      eyeColor: 'dark brown'\r\n    },\r\n\r\n    {\r\n      id: 2,\r\n      name: 'Frodo Baggins [TEST DATA]',\r\n      gender: 'male',\r\n      birthYear: 'long ago',\r\n      eyeColor: 'dark brown'\r\n    }\r\n  ];\r\n\r\n  _planets = [\r\n    {\r\n      id: 1,\r\n      name: 'Earth [TEST DATA]',\r\n      population: '7.530.000.000',\r\n      rotationPeriod: '23 hours 56 seconds',\r\n      diameter: '12.742 km'\r\n    },\r\n    {\r\n      id: 2,\r\n      name: 'Venus [TEST DATA]',\r\n      population: 'not known',\r\n      rotationPeriod: '243 days',\r\n      diameter: '12.104 km'\r\n    }\r\n  ];\r\n\r\n  _starships = [\r\n    {\r\n      id: 1,\r\n      name: 'USS Enterprise [TEST DATA]',\r\n      model: 'NCC-1701-C',\r\n      manufacturer: 'Northrop Grumman Shipbuilding',\r\n      costInCredits: 'not known',\r\n      length: 'approx 300 meters',\r\n      crew: 1000,\r\n      passengers: 50,\r\n      cargoCapacity: 100\r\n    }\r\n  ];\r\n\r\n  getAllPeople = async () => {\r\n    return this._people;\r\n  };\r\n\r\n  getPerson = async () => {\r\n    return this._people[0];\r\n  };\r\n\r\n  getAllPlanets = async () => {\r\n    return this._planets;\r\n  };\r\n\r\n  getPlanet = async () => {\r\n    return this._planets[0]\r\n  };\r\n\r\n  getAllStarships = async () => {\r\n    return this._starships;\r\n  };\r\n\r\n  getStarship = async () => {\r\n    return this._starships[0];\r\n  };\r\n\r\n  getPersonImage = () => {\r\n    return `https://placeimg.com/400/500/people`\r\n  };\r\n\r\n  getStarshipImage = () => {\r\n    return `https://placeimg.com/600/400/tech`;\r\n  };\r\n\r\n  getPlanetImage = () => {\r\n    return `https://placeimg.com/400/400/nature`\r\n  };\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nimport './error-button.css';\r\n\r\nexport default class ErrorButton extends Component {\r\n\r\n  state = {\r\n    renderError: false\r\n  };\r\n\r\n  render() {\r\n    if (this.state.renderError) {\r\n      this.foo.bar = 0;\r\n    }\r\n\r\n    return (\r\n      <button\r\n        className=\"error-button btn btn-danger btn-lg\"\r\n        onClick={() => this.setState({renderError: true})}>\r\n        Throw Error\r\n      </button>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nimport ErrorButton from '../error-button/error-button';\r\n\r\nimport './item-details.css';\r\n\r\nconst Record = ({item, field, label}) => {\r\n    return (\r\n        <li className=\"list-group-item\">\r\n            <span className=\"term\">{label}</span>\r\n            <span>{item[field]}</span>\r\n        </li>\r\n    );\r\n};\r\n\r\nexport {\r\n    Record\r\n};\r\n\r\n\r\nclass ItemDetails extends React.Component {\r\n    state = {\r\n        item: null,\r\n        image: null\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.updateItem();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.itemId !== prevProps.itemId ||\r\n            this.props.getData !== prevProps.getData ||\r\n            this.props.getImageUrl !== prevProps.getImageUrl) {\r\n            this.updateItem();\r\n        }\r\n    }\r\n\r\n    updateItem() {\r\n        const {itemId, getData, getImageUrl,} = this.props;\r\n        if (!itemId) {\r\n            return;\r\n        }\r\n\r\n        getData(itemId)\r\n            .then((item) => {\r\n                this.setState({\r\n                    item,\r\n                    image: getImageUrl(item)\r\n                });\r\n            });\r\n    }\r\n\r\n    render() {\r\n        const {item, image} = this.state;\r\n        if (!item) {\r\n            return <span>Select a item from a list</span>;\r\n        }\r\n        // const {item, image} = this.props;\r\n        const {name} = item;\r\n\r\n        return (\r\n            <div className=\"item-details card\">\r\n                <img className=\"item-image\"\r\n                     src={image}\r\n                     alt=\"item\"/>\r\n\r\n                <div className=\"card-body\">\r\n                    <h4>{name}</h4>\r\n                    <ul className=\"list-group list-group-flush\">\r\n                        {\r\n                            React.Children.map(this.props.children, (child) => {\r\n                                return React.cloneElement(child, {item});\r\n                            })\r\n                        }\r\n                    </ul>\r\n                    <ErrorButton/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ItemDetails;","import ItemDetails from './item-details';\r\n\r\nexport default ItemDetails;\r\n","import React from 'react';\r\nimport {SwapiServiceConsumer} from '../swapi-service-context';\r\n\r\nconst withSwapiService = (mapMethodsToProps) => (Wrapped) => {\r\n\r\n    return (props) => {\r\n        return (\r\n            <SwapiServiceConsumer>\r\n                {\r\n                    (swapiService) => {\r\n                        const serviceProps = mapMethodsToProps(swapiService);\r\n\r\n                        return (\r\n                            <Wrapped {...props} {...serviceProps} />\r\n                        );\r\n                    }\r\n                }\r\n            </SwapiServiceConsumer>\r\n        );\r\n    }\r\n};\r\n\r\nexport default withSwapiService;\r\n","import React from 'react';\r\nimport ItemDetails from \"../item-details\";\r\nimport {Record} from \"../item-details/item-details\";\r\nimport withSwapiService from \"../hoc-helpers/with-swapi-service\";\r\n\r\nconst PersonDetails = (props) => {\r\n  return (\r\n    <ItemDetails {...props} >\r\n      <Record field=\"gender\" label=\"Gender\" />\r\n      <Record field=\"eyeColor\" label=\"Eye Color\" />\r\n    </ItemDetails>\r\n  );\r\n};\r\n\r\nconst mapMethodsToProps = (swapiService) => {\r\n  return {\r\n    getData: swapiService.getPerson,\r\n    getImageUrl: swapiService.getPersonImage\r\n  }\r\n};\r\n\r\nexport default withSwapiService(mapMethodsToProps)(PersonDetails);\r\n","import React from 'react';\r\nimport ItemDetails from \"../item-details\";\r\nimport {Record} from \"../item-details/item-details\";\r\nimport withSwapiService from \"../hoc-helpers/with-swapi-service\";\r\n\r\nconst PlanetDetails = (props) => {\r\n  return (\r\n    <ItemDetails {...props}>\r\n      <Record field=\"population\" label=\"Population\" />\r\n      <Record field=\"rotationPeriod\" label=\"Rotation Period\" />\r\n      <Record field=\"diameter\" label=\"Diameter\" />\r\n    </ItemDetails>\r\n  );\r\n};\r\n\r\nconst mapMethodsToProps = (swapiService) => {\r\n  return {\r\n    getData: swapiService.getPlanet,\r\n    getImageUrl: swapiService.getPlanetImage\r\n  };\r\n};\r\n\r\nexport default withSwapiService(mapMethodsToProps)(PlanetDetails);\r\n","import React from 'react';\r\nimport ItemDetails from \"../item-details\";\r\nimport {Record} from \"../item-details/item-details\";\r\nimport withSwapiService from \"../hoc-helpers/with-swapi-service\";\r\n\r\nconst StarshipDetails = (props) => {\r\n  return (\r\n    <ItemDetails {...props}>\r\n      <Record field=\"model\" label=\"Model\" />\r\n      <Record field=\"length\" label=\"Length\" />\r\n      <Record field=\"costInCredits\" label=\"Cost\" />\r\n    </ItemDetails>\r\n  );\r\n};\r\n\r\nconst mapMethodsToProps = (swapiService) => {\r\n  return {\r\n    getData: swapiService.getStarship,\r\n    getImageUrl: swapiService.getStarshipImage\r\n  }\r\n};\r\n\r\nexport default withSwapiService(mapMethodsToProps)(StarshipDetails);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport './item-list.css';\r\n\r\nconst ItemList = (props) => {\r\n\r\n  const { data, onItemSelected, children: renderLabel } = props;\r\n\r\n  const items = data.map((item) => {\r\n    const { id } = item;\r\n    const label = renderLabel(item);\r\n\r\n    return (\r\n        <li className=\"list-group-item\"\r\n            key={id}\r\n            onClick={() => onItemSelected(id)}>\r\n          {label}\r\n        </li>\r\n    );\r\n  });\r\n\r\n  return (\r\n      <ul className=\"item-list list-group\">\r\n        {items}\r\n      </ul>\r\n  );\r\n};\r\n\r\nItemList.defaultProps = {\r\n  onItemSelected: () => {}\r\n};\r\n\r\nItemList.propTypes = {\r\n  onItemSelected: PropTypes.func,\r\n  data: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  children: PropTypes.func.isRequired\r\n}\r\n\r\nexport default ItemList;\r\n","import ItemList from './item-list';\r\n\r\nexport default ItemList;\r\n","import React, {Component} from 'react';\r\nimport Spinner from '../spinner';\r\nimport ErrorIndicator from \"../error-indicator\";\r\n\r\nconst withData = (View) => {\r\n    return class extends Component {\r\n\r\n        state = {\r\n            data: null,\r\n            loading: true,\r\n            error: false\r\n        };\r\n\r\n        componentDidUpdate(prevProps, prevState, snapshot) {\r\n            if (this.props.getData !== prevProps.getData) {\r\n                this.update()\r\n            }\r\n        }\r\n\r\n        update() {\r\n            this.setState({\r\n                loading: true,\r\n                error: false\r\n            });\r\n\r\n            this.props.getData()\r\n                .then((data) => {\r\n                    this.setState({\r\n                        data,\r\n                        loading: false\r\n                    });\r\n                })\r\n                .catch(() => {\r\n                    this.setState({\r\n                        error: true,\r\n                        loading: false\r\n                    })\r\n                })\r\n        }\r\n\r\n        componentDidMount() {\r\n            this.update();\r\n        }\r\n\r\n        render() {\r\n            const {data, loading, error} = this.state;\r\n\r\n            if (loading) {\r\n                return <Spinner/>;\r\n            }\r\n\r\n            if (error) {\r\n                return <ErrorIndicator/>\r\n            }\r\n\r\n            return <View {...this.props} data={data}/>;\r\n        }\r\n    };\r\n};\r\n\r\nexport default withData;\r\n","const compose = (...funcs) => (comp) => {\r\n    return funcs.reduceRight(\r\n        (wrapped, f) => f(wrapped), comp);\r\n};\r\n\r\nexport default compose;","import React from \"react\";\r\n\r\nconst withChildFunction = (fn) => (Wrapped) => {\r\n    return (props) => {\r\n        return (\r\n            <Wrapped {...props}>\r\n                {fn}\r\n            </Wrapped>\r\n        )\r\n    };\r\n};\r\n\r\nexport default withChildFunction;","import React from 'react';\r\nimport ItemList from '../item-list';\r\nimport {compose, withData} from '../hoc-helpers';\r\nimport withSwapiService from \"../hoc-helpers/with-swapi-service\";\r\nimport withChildFunction from \"../hoc-helpers/with-child-function\";\r\n\r\n\r\nconst renderName = ({name}) => <span>{name}</span>;\r\nconst renderModelAndName = ({model, name}) => <span>{name} ({model})</span>;\r\nconst mapPersonMethodsToProps = (swapiService) => {\r\n    return {\r\n        getData: swapiService.getAllPeople\r\n    };\r\n};\r\n\r\nconst mapPlanetMethodsToProps = (swapiService) => {\r\n    return {\r\n        getData: swapiService.getAllPlanets\r\n    };\r\n};\r\n\r\nconst mapStarshipMethodsToProps = (swapiService) => {\r\n    return {\r\n        getData: swapiService.getAllStarships\r\n    };\r\n};\r\n\r\n\r\nconst PersonList = compose(\r\n    withSwapiService(mapPersonMethodsToProps),\r\n    withData,\r\n    withChildFunction(renderName))\r\n(ItemList);\r\n\r\nconst PlanetList = compose(\r\n    withSwapiService(mapPlanetMethodsToProps),\r\n    withData,\r\n    withChildFunction(renderName))\r\n(ItemList);\r\n\r\nconst StarshipList = compose(\r\n    withSwapiService(mapStarshipMethodsToProps),\r\n    withData,\r\n    withChildFunction(renderModelAndName))\r\n(ItemList);\r\n\r\nexport {\r\n    PersonList,\r\n    PlanetList,\r\n    StarshipList\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Row = ({left, right}) => {\r\n    return (\r\n        <div className=\"row mb2\">\r\n            <div className=\"col-md-6\">\r\n                {left}\r\n            </div>\r\n            <div className=\"col-md-6\">\r\n                {right}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nRow.propTypes = {\r\n    left: PropTypes.node,\r\n    right: PropTypes.node\r\n}\r\n\r\nexport default Row;","import React from 'react';\r\nimport {PersonDetails, PersonList} from '../sw-components';\r\nimport Row from \"../row/row\";\r\nimport {withRouter} from \"react-router-dom\";\r\n\r\nconst PeoplePage = ({history, match}) => {\r\n    const {id} = match.params;\r\n    return (\r\n        <Row\r\n            left={<PersonList onItemSelected={(id) => history.push(id)}/>}\r\n            right={<PersonDetails itemId={id}/>}/>\r\n    );\r\n}\r\n\r\nexport default withRouter(PeoplePage);","import React, { Component } from 'react';\r\nimport { PlanetDetails, PlanetList } from '../sw-components';\r\nimport Row from \"../row/row\";\r\n\r\nexport default class PlanetsPage extends Component {\r\n\r\n    state = {\r\n        selectedItem: null\r\n    };\r\n\r\n    onItemSelected = (selectedItem) => {\r\n        this.setState({ selectedItem });\r\n    };\r\n\r\n    render() {\r\n        const { selectedItem } = this.state;\r\n\r\n        return (\r\n            <Row\r\n                left={<PlanetList onItemSelected={this.onItemSelected} />}\r\n                right={<PlanetDetails itemId={selectedItem} />} />\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport {StarshipList} from '../sw-components';\r\nimport {withRouter} from \"react-router-dom\";\r\n\r\nconst StarshipsPage = ({history}) => {\r\n    return (\r\n        <StarshipList onItemSelected={(itemId) => history.push(itemId)}/>\r\n    );\r\n}\r\n\r\nexport default withRouter(StarshipsPage);","import React, {useEffect, useState} from 'react';\r\n\r\nimport Spinner from '../spinner';\r\nimport SwapiService from '../../services/swapi-service';\r\nimport './random-planet.css';\r\nimport PropTypes from 'prop-types'\r\n\r\nconst RandomPlanetHooks = props => {\r\n    const [planet, setPlanet] = useState({});\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    const swapiService = new SwapiService();\r\n\r\n    useEffect(() => {\r\n        const {updateInterval} = props;\r\n        updatePlanet();\r\n        const interval = setInterval(updatePlanet, updateInterval);\r\n        return () => clearInterval(interval);\r\n    }, [])\r\n\r\n\r\n    const onPlanetLoaded = (planet) => {\r\n        setPlanet(planet);\r\n        setLoading(false);\r\n    };\r\n\r\n    const updatePlanet = () => {\r\n        const id = Math.floor(Math.random() * 17) + 2;\r\n        return swapiService\r\n            .getPlanet(id)\r\n            .then(onPlanetLoaded)\r\n    };\r\n\r\n    const hasData = !(loading);\r\n\r\n    const spinner = loading ? <Spinner/> : null;\r\n    const content = hasData ? <PlanetView planet={planet}/> : null;\r\n\r\n    return (\r\n        <div className=\"random-planet jumbotron rounded\">\r\n            {spinner}\r\n            {content}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nconst PlanetView = ({planet}) => {\r\n\r\n    const {\r\n        id, name, population,\r\n        rotationPeriod, diameter\r\n    } = planet;\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <img className=\"planet-image\"\r\n                 src={`https://starwars-visualguide.com/assets/img/planets/${id}.jpg`}\r\n                 alt=\"planet\"/>\r\n            <div>\r\n                <h4>{name}</h4>\r\n                <ul className=\"list-group list-group-flush\">\r\n                    <li className=\"list-group-item\">\r\n                        <span className=\"term\">Population</span>\r\n                        <span>{population}</span>\r\n                    </li>\r\n                    <li className=\"list-group-item\">\r\n                        <span className=\"term\">Rotation Period</span>\r\n                        <span>{rotationPeriod}</span>\r\n                    </li>\r\n                    <li className=\"list-group-item\">\r\n                        <span className=\"term\">Diameter</span>\r\n                        <span>{diameter}</span>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nRandomPlanetHooks.defaultProps = {\r\n    updateInterval: 3000\r\n}\r\n\r\nRandomPlanetHooks.propTypes = {\r\n    updateInterval: PropTypes.number\r\n}\r\n\r\nexport default RandomPlanetHooks;\r\n\r\n\r\n","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nconst LoginPage = ({ isLoggedIn, onLogin }) => {\r\n\r\n  if (isLoggedIn) {\r\n    return <Redirect to=\"/\"/>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"jumbotron\">\r\n      <p>Login to see secret page!</p>\r\n      <button\r\n        className=\"btn btn-primary\"\r\n        onClick={onLogin}>\r\n        Login\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nconst SecretPage = ({ isLoggedIn }) => {\r\n\r\n  if (isLoggedIn) {\r\n    return (\r\n      <div className=\"jumbotron text-center\">\r\n        <h3>This page is full of secrets!!!</h3>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return <Redirect to=\"/login\" />;\r\n\r\n};\r\n\r\nexport default SecretPage;\r\n","import React from \"react\";\r\n\r\nconst notFoundPage = () => {\r\n    return (\r\n        <div>\r\n            <h1>Page Not Found</h1>\r\n            <p style={{fontSize:'24px', margin: '30px 0px', color: 'lightblue' }}>We couldn't find what you were looking for.</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default notFoundPage;","import App from './app';\r\n\r\nexport default App;\r\n","import React, {Component} from 'react';\r\nimport Header from '../header';\r\nimport RandomPlanet from '../random-planet';\r\nimport SwapiService from \"../../services/swapi-service\";\r\nimport {SwapiServiceProvider} from '../swapi-service-context'\r\nimport './app.css';\r\nimport ErrorBoundry from \"../error-boundry/error-boundry\";\r\nimport DummySwapiService from \"../../services/dummy-swapi-service\";\r\nimport {PeoplePage, PlanetsPage, StarshipsPage} from \"../pages\";\r\nimport RandomPlanetHooks from \"../random-planet/hooks-random-planet\";\r\nimport {BrowserRouter, Redirect, Route, Switch} from \"react-router-dom\";\r\nimport StarshipDetails from \"../sw-components/starship-details\";\r\nimport LoginPage from \"../pages/login-page\";\r\nimport SecretPage from \"../pages/secret-page\";\r\nimport notFoundPage from \"../pages/notFoundPage\";\r\n\r\nexport default class App extends Component {\r\n    state = {\r\n        swapiService: new SwapiService(),\r\n        showRandomPlanet: true,\r\n        isLoggedIn: false\r\n    };\r\n\r\n    onLogin = () => {\r\n        this.setState({\r\n            isLoggedIn: true\r\n        })\r\n    };\r\n\r\n    onServiceChange = () => {\r\n        this.setState(({swapiService}) => {\r\n            const Service = swapiService instanceof SwapiService ?\r\n                DummySwapiService : SwapiService;\r\n\r\n            return {\r\n                swapiService: new Service()\r\n            };\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {isLoggedIn} = this.state;\r\n        const planet = this.state.showRandomPlanet ?\r\n            <RandomPlanetHooks/> :\r\n            null;\r\n\r\n        return (\r\n            <ErrorBoundry>\r\n                <SwapiServiceProvider value={this.state.swapiService}>\r\n                    <BrowserRouter>\r\n                        <div className=\"stardb-app\">\r\n                            <Header onServiceChange={this.onServiceChange}/>\r\n                            {planet}\r\n                            <Switch>\r\n                                <Route exact path='/' render={() => <h2>Welcome to StarDB</h2>}/>\r\n                                <Route path='/people/:id?' component={PeoplePage}/>\r\n                                <Route path='/planets' component={PlanetsPage}/>\r\n                                <Route exact path='/starships' component={StarshipsPage}/>\r\n                                <Route path='/starships/:id'\r\n                                       render={({match}) => {\r\n                                           return <StarshipDetails itemId={match.params.id}/>\r\n                                       }}/>\r\n                                <Route path='/login' render={() => (\r\n                                    <LoginPage isLoggedIn={isLoggedIn}\r\n                                               onLogin={this.onLogin}/>)}\r\n                                />\r\n                                <Route path='/secret' render={() => (\r\n                                    <SecretPage\r\n                                        isLoggedIn={isLoggedIn}/>)}\r\n                                />\r\n                                <Route component={notFoundPage}/>\r\n                            </Switch>\r\n                        </div>\r\n                    </BrowserRouter>\r\n                </SwapiServiceProvider>\r\n            </ErrorBoundry>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/app';\r\n\r\nReactDOM.render(<App />,\r\n    document.getElementById('root'));\r\n"],"sourceRoot":""}